services:
  frontend:
    build:
      context: .  # Use the project root as the build context
      dockerfile: ./docker/frontend/Dockerfile  # Path to Dockerfile
    ports:
      - "${PORT}:${PORT}"  # Use the port specified in .env
    volumes:
      - ./frontend:/frontend  # Mount the frontend directory in the container at /frontend
    env_file:
      - ./.env  # Use the root .env file for the server
      - ./frontend/.env.local
    working_dir: /frontend  # Set the working directory in the container to /frontend
    environment:
      - PORT=${PORT}
      - TEST_DATABASE_URL=postgresql://${TEST_DB_USER}:${TEST_DB_PASSWORD}@${TEST_DB_HOST}:${TEST_DB_PORT}/${TEST_DB_NAME}
    command: >
      sh -c "
        if [ ! -d node_modules ] || [ ! -f node_modules/.package-lock.json ]; then
          echo '[entrypoint] node_modules が無いので npm ci を実行します'; 
          npm ci --legacy-peer-deps;
        fi &&
        npm run dev
      "
    depends_on:
      test-db:
        condition: service_healthy
    networks:
      - app-network

  # テストデータベース
  test-db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${TEST_DB_USER}
      POSTGRES_PASSWORD: ${TEST_DB_PASSWORD}
      POSTGRES_DB: ${TEST_DB_NAME}
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${TEST_DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # ngrokサービス - webhookテスト用の公開URLを提供
  ngrok:
    image: ngrok/ngrok:latest
    restart: unless-stopped
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    ports:
      - "${NGROK_UI_PORT:-4040}:4040"  # ngrok UI - デフォルト4040、環境変数で上書き可能
    env_file:
      - ./.env  # Use the root .env file for the server
    command: http frontend:${PORT} --log=stdout
    networks:
      - app-network
    depends_on:
      - frontend

networks:
  app-network:
    driver: bridge
