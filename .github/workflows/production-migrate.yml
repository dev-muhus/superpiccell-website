name: Production Database Migration

on:
  push:
    branches: [ main ]
  workflow_dispatch: # 手動実行も可能
    inputs:
      confirm_migration:
        description: '本番マイグレーション実行を確認してください (yes/no)'
        required: true
        default: 'no'
        type: choice
        options:
        - 'no'
        - 'yes'

env:
  NODE_VERSION: '18'

jobs:
  # 本番データベースマイグレーション
  production-migration:
    runs-on: ubuntu-latest
    environment: production # GitHub環境保護ルールを使用
    
    steps:
    - name: Validate migration confirmation
      if: github.event_name == 'workflow_dispatch'
      run: |
        if [ "${{ github.event.inputs.confirm_migration }}" != "yes" ]; then
          echo "❌ マイグレーション実行が確認されていません"
          exit 1
        fi
        
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create secure environment file
      run: |
        # セキュアな環境変数ファイルを作成（GitHub Secretsから）
        cat > frontend/.env.production.local << EOF
        DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}
        NODE_ENV=production
        # セキュリティ強化
        MIGRATION_TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
        MIGRATION_COMMIT_SHA=${{ github.sha }}
        MIGRATION_ACTOR=${{ github.actor }}
        EOF
        
    - name: Build and start Docker containers
      run: |
        echo "🐳 Building and starting Docker containers..."
        echo "🔒 Security: Using GitHub Secrets for database connection"
        echo "👤 Executed by: ${{ github.actor }}"
        echo "📝 Commit: ${{ github.sha }}"
        
        # 本番マイグレーション用の最小限の設定でfrontendコンテナのみ起動
        docker compose up -d frontend
        
        # frontendコンテナが完全に起動するまで待機
        echo "⏳ Waiting for frontend container to be ready..."
        timeout 60 bash -c 'until docker compose exec frontend test -f package.json; do sleep 2; done'
        
    - name: Install dependencies in container
      run: |
        echo "📦 Installing dependencies in frontend container..."
        docker compose exec frontend npm ci --only=production
        
    - name: Pre-migration validation
      run: |
        echo "🔍 Pre-migration validation..."
        # データベース接続テスト
        docker compose exec frontend sh -c "NODE_ENV=production npm run db:verify" || {
          echo "❌ Pre-migration validation failed"
          exit 1
        }
        
    - name: Run production database migration
      run: |
        echo "🚀 Starting production database migration..."
        echo "📅 Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
        echo "🔗 Commit: ${{ github.sha }}"
        echo "👤 Actor: ${{ github.actor }}"
        
        # Dockerコンテナ内でマイグレーション実行（重要なマイグレーション適用ルールに準拠）
        echo "🔄 Running database migrations in frontend container..."
        docker compose exec frontend sh -c "NODE_ENV=production npm run db:migrate" || {
          echo "❌ Migration failed"
          exit 1
        }
        
        # マイグレーション後の検証
        echo "✅ Verifying migration results in frontend container..."
        docker compose exec frontend sh -c "NODE_ENV=production npm run db:verify" || {
          echo "❌ Post-migration validation failed"
          exit 1
        }
        
        echo "✨ Production database migration completed successfully!"
        
    - name: Generate migration report
      if: success()
      run: |
        echo "📊 Generating migration report..."
        cat > migration-report.md << EOF
        # Production Migration Report
        
        **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Commit**: ${{ github.sha }}
        **Actor**: ${{ github.actor }}
        **Status**: ✅ SUCCESS
        
        ## Migration Details
        - Environment: Production
        - Database: Neon DB
        - Method: Docker Container via GitHub Actions
        - Security: GitHub Secrets + Environment Protection
        
        ## Verification
        - Pre-migration validation: ✅ PASSED
        - Migration execution: ✅ PASSED  
        - Post-migration validation: ✅ PASSED
        EOF
        
        echo "📋 Migration report generated"
        cat migration-report.md
        
    - name: Cleanup Docker containers
      if: always()
      run: |
        echo "🧹 Cleaning up Docker containers..."
        docker compose down
        
    - name: Notify migration status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Production database migration completed successfully"
          echo "🔗 Commit: ${{ github.sha }}"
          echo "👤 Executed by: ${{ github.actor }}"
        else
          echo "❌ Production database migration failed"
          echo "🔗 Commit: ${{ github.sha }}"
          echo "👤 Executed by: ${{ github.actor }}"
          exit 1 