name: Production Database Migration

on:
  push:
    branches: [ main ]
  workflow_dispatch: # 手動実行も可能
    inputs:
      confirm_migration:
        description: '本番マイグレーション実行を確認してください (yes/no)'
        required: true
        default: 'no'
        type: choice
        options:
        - 'no'
        - 'yes'

env:
  NODE_VERSION: '18'

jobs:
  # 本番データベースマイグレーション
  production-migration:
    runs-on: ubuntu-latest
    environment: production # GitHub環境保護ルールを使用
    
    steps:
    - name: Validate migration confirmation
      if: github.event_name == 'workflow_dispatch'
      run: |
        if [ "${{ github.event.inputs.confirm_migration }}" != "yes" ]; then
          echo "❌ マイグレーション実行が確認されていません"
          exit 1
        fi
        
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Create secure environment file
      run: |
        # セキュアな環境変数ファイルを作成（GitHub Secretsから）
        cat > frontend/.env.production.local << EOF
        # Database
        DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}
        NODE_ENV=production
        
        # Clerk Authentication (本番環境用)
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}
        CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
        CLERK_WEBHOOK_SECRET=${{ secrets.CLERK_WEBHOOK_SECRET }}
        
        # Cloudinary (本番環境用)
        CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
        CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
        
        # R2 Storage (本番環境用)
        R2_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }}
        R2_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }}
        
        # セキュリティ強化
        MIGRATION_TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
        MIGRATION_COMMIT_SHA=${{ github.sha }}
        MIGRATION_ACTOR=${{ github.actor }}
        EOF
        
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        cd frontend
        npm ci --only=production
        
    - name: Pre-migration validation
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        NODE_ENV: production
      run: |
        echo "🔍 Pre-migration validation..."
        cd frontend
        # データベース接続テスト
        npm run db:verify || {
          echo "❌ Pre-migration validation failed"
          echo "🚨 CRITICAL: Database connection or schema validation failed!"
          echo "🛑 This indicates a serious issue that must be resolved before proceeding."
          exit 1
        }
        
    - name: Run production database migration
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        NODE_ENV: production
      run: |
        echo "🚀 Starting production database migration..."
        echo "📅 Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
        echo "🔗 Commit: ${{ github.sha }}"
        echo "👤 Actor: ${{ github.actor }}"
        
        cd frontend
        
        # マイグレーション実行（Node.js環境で直接実行）
        echo "🔄 Running database migrations..."
        npm run db:migrate || {
          echo "❌ MIGRATION FAILED!"
          echo "🚨 CRITICAL ERROR: Production database migration has failed!"
          echo "🛑 This is a blocking issue that requires immediate attention."
          echo "📋 Troubleshooting steps:"
          echo "   1. Check database connectivity"
          echo "   2. Verify migration files syntax"
          echo "   3. Check for conflicting schema changes"
          echo "   4. Review database permissions"
          echo "🔗 Failed commit: ${{ github.sha }}"
          echo "👤 Failed by: ${{ github.actor }}"
          exit 1
        }
        
        # マイグレーション後の検証
        echo "✅ Verifying migration results..."
        npm run db:verify || {
          echo "❌ POST-MIGRATION VALIDATION FAILED!"
          echo "🚨 CRITICAL: Migration completed but validation failed!"
          echo "🛑 Database may be in an inconsistent state."
          echo "📋 Immediate action required:"
          echo "   1. Check database schema integrity"
          echo "   2. Verify all tables and constraints"
          echo "   3. Consider rollback if necessary"
          exit 1
        }
        
        echo "✨ Production database migration completed successfully!"
        
    - name: Create failure marker on error
      if: failure()
      run: |
        echo "🚨 MIGRATION FAILURE DETECTED"
        echo "Creating failure marker for monitoring systems..."
        
        # 失敗情報をファイルに記録
        cat > migration-failure.json << EOF
        {
          "status": "FAILED",
          "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "commit": "${{ github.sha }}",
          "actor": "${{ github.actor }}",
          "workflow_run": "${{ github.run_id }}",
          "error_type": "MIGRATION_FAILURE",
          "severity": "CRITICAL",
          "action_required": "IMMEDIATE_ATTENTION"
        }
        EOF
        
        echo "📄 Failure details:"
        cat migration-failure.json
        
        # 失敗をより明確にするため、明示的にexit 1
        echo "🛑 Workflow marked as FAILED due to migration issues"
        exit 1
        
    - name: Generate migration report
      if: success()
      run: |
        echo "📊 Generating migration report..."
        cat > migration-report.md << EOF
        # Production Migration Report
        
        **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Commit**: ${{ github.sha }}
        **Actor**: ${{ github.actor }}
        **Status**: ✅ SUCCESS
        **Workflow Run**: ${{ github.run_id }}
        
        ## Migration Details
        - Environment: Production
        - Database: Neon DB
        - Method: Node.js via GitHub Actions
        - Security: GitHub Secrets + Environment Protection
        
        ## Verification
        - Pre-migration validation: ✅ PASSED
        - Migration execution: ✅ PASSED  
        - Post-migration validation: ✅ PASSED
        
        ## Next Steps
        - Monitor application performance
        - Verify all features are working correctly
        - Check for any unexpected behavior
        EOF
        
        echo "📋 Migration report generated"
        cat migration-report.md
        
    - name: Notify migration status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Production database migration completed successfully"
          echo "🔗 Commit: ${{ github.sha }}"
          echo "👤 Executed by: ${{ github.actor }}"
          echo "🌐 Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        else
          echo "❌ PRODUCTION DATABASE MIGRATION FAILED"
          echo "🚨 CRITICAL FAILURE - IMMEDIATE ACTION REQUIRED"
          echo "🔗 Failed commit: ${{ github.sha }}"
          echo "👤 Failed by: ${{ github.actor }}"
          echo "🌐 Failed workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "🛑 IMPORTANT: This failure indicates that:"
          echo "   - Code was pushed to main branch"
          echo "   - But database migration failed"
          echo "   - Application may be in inconsistent state"
          echo ""
          echo "📋 Required actions:"
          echo "   1. Do NOT deploy application until migration is fixed"
          echo "   2. Investigate migration failure immediately"
          echo "   3. Fix migration issues"
          echo "   4. Re-run migration or push fix"
          echo ""
          exit 1 